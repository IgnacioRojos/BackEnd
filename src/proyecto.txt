APP

const express = require('express');
const productRoutes = require('./routes/productRoutes');
const cartRoutes = require('./routes/cartRoutes');

const app = express();
app.use(express.json()); // Middleware que permite parsear el cuerpo de la petición en formato JSON

// Rutas de productos y carritos
app.use('/api/products', productRoutes); // Ruta para las operaciones relacionadas con productos
app.use('/api/carts', cartRoutes); // Ruta para las operaciones relacionadas con carritos

const PORT = 8080;
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`); // Inicia el servidor en el puerto 8080
});

---------------------------------------------------------------


productController.js





const ProductManager = require('../managers/ProductManager');
const productManager = new ProductManager(); // Instancia de ProductManager para gestionar los productos

// Obtiene todos los productos
const getAllProducts = (req, res) => {
  const products = productManager.getAllProducts();
  res.json(products); // Responde con la lista de productos
};

// Obtiene un producto por su ID
const getProductById = (req, res) => {
  const product = productManager.getProductById(req.params.pid); // Busca el producto por el ID
  if (product) {
    res.json(product); // Si se encuentra, responde con los datos del producto
  } else {
    res.status(404).send('Producto no encontrado'); // Si no se encuentra, responde con error 404
  }
};

// Agrega un nuevo producto
const addProduct = (req, res) => {
  const newProduct = req.body; // Obtiene el producto del cuerpo de la solicitud
  const addedProduct = productManager.addProduct(newProduct); // Llama a la función para agregarlo
  res.status(201).json(addedProduct); // Responde con el producto agregado y estado 201 (Creado)
};

// Actualiza un producto existente
const updateProduct = (req, res) => {
  const updatedProduct = req.body; // Obtiene los datos para actualizar el producto
  const product = productManager.updateProduct(req.params.pid, updatedProduct); // Actualiza el producto
  if (product) {
    res.json(product); // Si el producto se actualizó, responde con el producto actualizado
  } else {
    res.status(404).send('Producto no encontrado'); // Si no se encuentra, responde con error 404
  }
};

// Elimina un producto por su ID
const deleteProduct = (req, res) => {
  const productId = req.params.pid; // Obtiene el ID del producto
  const deleted = productManager.deleteProduct(productId); // Llama a la función para eliminar el producto
  if (deleted) {
    res.status(204).send(); // Responde con estado 204 (sin contenido) si se eliminó correctamente
  } else {
    res.status(404).send('Producto no encontrado'); // Si no se encuentra, responde con error 404
  }
};

module.exports = {
  getAllProducts,
  getProductById,
  addProduct,
  updateProduct,
  deleteProduct,
};


---------------------------------------------------------------


cartController.js


const CartManager = require('../managers/CartManager');
const cartManager = new CartManager(); // Instancia de CartManager para gestionar los carritos

// Crea un nuevo carrito
const createCart = (req, res) => {
  const newCart = cartManager.createCart(); // Crea un carrito vacío
  res.status(201).json(newCart); // Responde con el carrito recién creado y estado 201 (Creado)
};

// Obtiene un carrito por su ID
const getCartById = (req, res) => {
  const cart = cartManager.getCartById(req.params.cid); // Busca el carrito por el ID
  if (cart) {
    res.json(cart); // Si el carrito existe, lo responde
  } else {
    res.status(404).send('Carrito no encontrado'); // Si no existe, responde con error 404
  }
};

// Agrega un producto al carrito
const addProductToCart = (req, res) => {
  const { pid } = req.params; // Obtiene el ID del producto desde los parámetros
  const { quantity } = req.body; // Obtiene la cantidad desde el cuerpo de la solicitud
  const updatedCart = cartManager.addProductToCart(req.params.cid, pid, quantity); // Agrega el producto al carrito
  if (updatedCart) {
    res.json(updatedCart); // Responde con el carrito actualizado
  } else {
    res.status(404).send('Carrito o producto no encontrado'); // Si no se encuentra el carrito o el producto, responde con error 404
  }
};

module.exports = {
  createCart,
  getCartById,
  addProductToCart,
};



---------------------------------------------------------------



productRoutes.js



const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');

// Definición de rutas y sus controladores
router.get('/', productController.getAllProducts); // Ruta para obtener todos los productos
router.get('/:pid', productController.getProductById); // Ruta para obtener un producto por ID
router.post('/', productController.addProduct); // Ruta para agregar un nuevo producto
router.put('/:pid', productController.updateProduct); // Ruta para actualizar un producto
router.delete('/:pid', productController.deleteProduct); // Ruta para eliminar un producto

module.exports = router;




---------------------------------------------------------------



cartRoutes.js


const express = require('express');
const router = express.Router();
const cartController = require('../controllers/cartController');

// Definición de rutas y sus controladores
router.post('/', cartController.createCart); // Ruta para crear un nuevo carrito
router.get('/:cid', cartController.getCartById); // Ruta para obtener un carrito por ID
router.post('/:cid/product/:pid', cartController.addProductToCart); // Ruta para agregar un producto al carrito

module.exports = router;




---------------------------------------------------------------



ProductManager.js


const fs = require('fs');
const path = './data/products.json'; // Ruta al archivo JSON donde se almacenan los productos

class ProductManager {
  constructor() {
    this.products = this.loadProducts(); // Carga los productos al iniciar la clase
  }

  // Carga los productos desde el archivo JSON
  loadProducts() {
    if (fs.existsSync(path)) {
      const data = fs.readFileSync(path, 'utf-8');
      return JSON.parse(data); // Parsea el archivo JSON y lo devuelve como un array
    }
    return []; // Si no existe el archivo, retorna un array vacío
  }

  // Guarda los productos en el archivo JSON
  saveProducts() {
    fs.writeFileSync(path, JSON.stringify(this.products, null, 2)); // Guarda los productos en formato JSON
  }

  // Obtiene todos los productos
  getAllProducts() {
    return this.products; // Retorna el array de productos
  }

  // Obtiene un producto por su ID
  getProductById(id) {
    return this.products.find(product => product.id === id); // Busca y retorna el producto con el ID dado
  }

  // Agrega un nuevo producto
  addProduct(product) {
    const id = this.products.length > 0 ? Math.max(this.products.map(p => p.id)) + 1 : 1; // Genera un nuevo ID para el producto
    const newProduct = { id, ...product }; // Crea el nuevo producto con el ID asignado
    this.products.push(newProduct); // Agrega el producto al array
    this.saveProducts(); // Guarda el array actualizado en el archivo
    return newProduct; // Retorna el producto agregado
  }

  // Actualiza un producto existente
  updateProduct(id, updatedFields) {
    const product = this.getProductById(id); // Busca el producto por ID
    if (!product) return null; // Si no lo encuentra, retorna null
    Object.assign(product, updatedFields); // Actualiza los campos del producto
    this.saveProducts(); // Guarda los cambios en el archivo
    return product; // Retorna el producto actualizado
  }

  // Elimina un producto por ID
  deleteProduct(id) {
    const index = this.products.findIndex(p => p.id === id); // Busca el índice del producto en el array
    if (index === -1) return false; // Si no lo encuentra, retorna false
    this.products.splice(index, 1); // Elimina el producto del array
    this.saveProducts(); // Guarda el array actualizado en el archivo
    return true; // Retorna true si se eliminó correctamente
  }
}

module.exports = ProductManager;




---------------------------------------------------------------


CartManager.js


const fs = require('fs');
const path = './data/carts.json'; // Ruta al archivo JSON donde se almacenan los carritos

class CartManager {
  constructor() {
    this.carts = this.loadCarts(); // Carga los carritos al iniciar la clase
  }

  // Carga los carritos desde el archivo JSON
  loadCarts() {
    if (fs.existsSync(path)) {
      const data = fs.readFileSync(path, 'utf-8');
      return JSON.parse(data); // Parsea el archivo JSON y lo retorna como un array
    }
    return []; // Si no existe el archivo, retorna un array vacío
  }

  // Guarda los carritos en el archivo JSON
  saveCarts() {
    fs.writeFileSync(path, JSON.stringify(this.carts, null, 2)); // Guarda los carritos en formato JSON
  }

  // Crea un nuevo carrito
  createCart() {
    const id = this.carts.length > 0 ? Math.max(this.carts.map(c => c.id)) + 1 : 1; // Genera un nuevo ID para el carrito
    const newCart = { id, products: [] }; // Crea un carrito vacío
    this.carts.push(newCart); // Agrega el carrito al array
    this.saveCarts(); // Guarda el array actualizado en el archivo
    return newCart; // Retorna el carrito creado
  }

  // Obtiene un carrito por su ID
  getCartById(id) {
    return this.carts.find(cart => cart.id === id); // Busca el carrito por ID
  }

  // Agrega un producto al carrito
  addProductToCart(cartId, productId, quantity) {
    const cart = this.getCartById(cartId); // Busca el carrito por ID
    if (!cart) return null; // Si no existe el carrito, retorna null

    const existingProduct = cart.products.find(p => p.product === productId); // Busca si el producto ya está en el carrito
    if (existingProduct) {
      existingProduct.quantity += quantity; // Si ya existe, solo actualiza la cantidad
    } else {
      cart.products.push({ product: productId, quantity }); // Si no existe, lo agrega con la cantidad indicada
    }

    this.saveCarts(); // Guarda el array de carritos actualizado en el archivo
    return cart; // Retorna el carrito actualizado
  }
}

module.exports = CartManager;






















const express = require('express');
const router = express.Router();
const cartController = require('../controllers/cartController');

// Ruta para crear un nuevo carrito
router.post('/', async (req, res) => {
  try {
    const newCart = await cartController.createCart(); // Llama al controlador para crear el carrito
    if (!newCart) {
      return res.status(500).json({ error: 'No se pudo crear el carrito' }); // En caso de error, responde con un mensaje adecuado
    }
    res.status(201).json({ success: true, cart: newCart }); // Responde con el carrito creado
  } catch (error) {
    res.status(500).json({ error: 'Error al crear el carrito' }); // Responde con un error si algo sale mal
  }
});

// Ruta para obtener un carrito por ID
router.get('/:cid', async (req, res) => {
  try {
    const cart = await cartController.getCartById(req.params.cid); // Llama al controlador para obtener el carrito por ID
    if (!cart) {
      return res.status(404).json({ error: 'Carrito no encontrado' }); // Si el carrito no existe, responde con error 404
    }
    res.json({ success: true, cart }); // Responde con los datos del carrito
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener el carrito' }); // Responde con un error en caso de fallo
  }
});

// Ruta para agregar un producto al carrito
router.put('/:cid/product/:pid', async (req, res) => {
  try {
    const { pid, cid } = req.params;
    const { quantity } = req.body;

    // Llama al controlador para agregar un producto al carrito
    const updatedCart = await cartController.addProductToCart(cid, pid, quantity);

    if (!updatedCart) {
      return res.status(404).json({ error: 'Carrito o producto no encontrado' }); // Si el carrito o el producto no existen
    }
    
    res.json({ success: true, cart: updatedCart }); // Responde con el carrito actualizado
  } catch (error) {
    res.status(500).json({ error: 'Error al agregar el producto al carrito' }); // Responde con un error en caso de fallo
  }
});

module.exports = router;





